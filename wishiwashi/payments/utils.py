import datetime
from decimal import Decimal

from django.conf import settings
import stripe


def authorize_charge(amount, token, currency="gbp"):
    """
    amount: whole amount in pence (2000 == 20.00)
    token: Generated by Stripe and posted back to us
    currency: GBP default

    Auth and capture payments

    support.stripe.com/questions/does-stripe-support-authorize-and-capture
    """
    print('1STTTTTTTTTT')
    print(amount)
    print(token)
    #amount = 5.45
    stripe.api_version = settings.STRIPE_API_VERSION
    stripe.api_key = settings.STRIPE_API_KEY
    charge = stripe.Charge.create(amount=amount,
                                  currency=currency,
                                  card=token,
                                  capture=False)
    print('2RRRRRRRRRRRRRRRR')

    if not getattr(charge, 'id', None):
        raise AttributeError(
            "Stripe charge id does not exist: {}".format(charge))
    print('3PPPPPPPP')

    if not getattr(charge, 'created', None):
        raise AttributeError(
            "Stripe timestamp does not exist: {}".format(charge))

    print(charge)
    return charge


def capture_charge(charge_id, amount=None):
    """
    charge_id: Stripe charge id
    amount: whole amount in pence (2000 == 20.00). The amount to capture,
    which must be less than or equal to the original amount.
    Any additional amount will be automatically refunded.

    Auth and capture payments
    https://support.stripe.com/questions/does-stripe-support-authorize-and-capture
    """
    if amount and not isinstance(amount, int):
        msg = "Capture charge amount must be whole integer: {}".format(amount)
        raise ValueError(msg)

    stripe.api_version = settings.STRIPE_API_VERSION
    stripe.api_key = settings.STRIPE_API_KEY

    if amount is not None:
        charge = stripe.Charge.retrieve(charge_id, amount=amount)
    else:
        charge = stripe.Charge.retrieve(charge_id)

    charge.capture()

    if not charge.captured:
        raise ValueError("Charge not captured: {}".format(charge))

    return True


def timestamp_to_datetime_str(timestamp):
    """
    1421331342.949035 > '2015-01-15T14:15:42Z'
    """
    return datetime.datetime.fromtimestamp(timestamp).strftime('%Y-%m-%dT%H:%M:%SZ')


def transportation_charge(total):
    """ Return transit charge if applicable """
    if total and total < settings.MIN_FREE_TRANSPORTATION:
        return settings.TRANSPORTATION_CHARGE
    return Decimal('0.00')


def vat_cost(total):
    """ Return vat breakdown """
    vat_rate = (settings.VAT_RATE / Decimal('100.00')) + Decimal('1')

    #  The quantize() method rounds to a fixed number of decimal places
    TWOPLACES = Decimal('0.01')
    ex_vat = (total / vat_rate).quantize(TWOPLACES)
    vat = (total - ex_vat).quantize(TWOPLACES)

    return {'vat': vat, 'ex_vat': ex_vat}

